# Generated by Django 5.1b1 on 2025-08-20 10:52

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Delivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_id', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True, db_default='', default='', max_length=150)),
                ('status', models.SmallIntegerField(blank=True, choices=[(0, 'Заказ покинул город отправления'), (1, 'Заказ готов к выдаче'), (2, 'Заказ вручен'), (3, 'Заказ выдан на доставку курьеру'), (4, 'Заказ не вручен'), (5, 'Заказ не создан')], default=0)),
                ('description', models.TextField(blank=True, db_default='', default='', max_length=500)),
                ('price', models.FloatField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Deliveries',
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=150)),
                ('answer', models.TextField(blank=True, db_default='', default='К сожалению, на этот вопрос пока не поступило ответа :(')),
            ],
            options={
                'verbose_name': 'FAQ',
                'verbose_name_plural': 'FAQ',
                'ordering': ['?'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.PositiveSmallIntegerField()),
                ('width', models.PositiveSmallIntegerField()),
                ('height', models.PositiveSmallIntegerField()),
                ('legs', models.BooleanField(default=False)),
                ('handles', models.BooleanField(default=True)),
                ('groove', models.BooleanField(default=False)),
                ('material', models.SmallIntegerField(choices=[(0, 'Дуб'), (1, 'Орех'), (2, 'Ясень'), (3, 'Акация'), (4, 'Каучуковое дерево'), (5, 'Манговое дерево'), (6, 'Бамбук')], db_default=0, default=0)),
                ('use_type', models.SmallIntegerField(choices=[(0, 'Разделочная доска'), (1, 'Сервировочная доска'), (2, 'Подставка')], db_default=0, default=0)),
                ('price', models.FloatField(db_default=0, default=0)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_group', models.SmallIntegerField(choices=[(0, 'Администратор'), (1, 'Сотрудник мастерской'), (2, 'Довольный клиент')], db_default=2, default=2)),
                ('registration_date', models.DateField(auto_now_add=True)),
                ('name', models.CharField(blank=True, max_length=50)),
                ('second_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('phone', models.CharField(max_length=20, unique=True)),
                ('email', models.CharField(max_length=50, unique=True)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('password', models.CharField(max_length=50)),
                ('pref_delivery_type', models.SmallIntegerField(choices=[(-1, 'Не указан'), (0, 'Самовывоз'), (1, 'СДЭК')], db_default=-1, default=-1, verbose_name='Preferable delivery type')),
                ('main_address', models.CharField(blank=True, db_default='', default='', max_length=150)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('confirmation_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('done_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('received_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('delivery_type', models.SmallIntegerField(blank=True, choices=[(0, 'Самовывоз'), (1, 'СДЭК')], db_default=0, default=0)),
                ('description', models.TextField(blank=True, db_default='', default='', max_length=500)),
                ('status', models.SmallIntegerField(blank=True, choices=[(0, 'Новый заказ'), (1, 'На уточнении'), (2, 'Ожидает оплаты'), (3, 'В работе'), (4, 'Передается в доставку'), (5, 'В доставке'), (6, 'Завершен')], db_default=0, default=0)),
                ('price', models.FloatField(db_default=0, default=0)),
                ('delivery', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='webapp.delivery')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('webapp.all_orders_access', 'Has an access to all orders (including order editor')],
            },
        ),
        migrations.CreateModel(
            name='ProductList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.SmallIntegerField(db_default=1, default=1)),
                ('order', models.ForeignKey(db_default=None, on_delete=django.db.models.deletion.CASCADE, to='webapp.order')),
                ('product', models.ForeignKey(db_default=None, on_delete=django.db.models.deletion.CASCADE, to='webapp.product')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('order', 'product'), name='unique_product_in_list')],
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.SmallIntegerField(blank=True, db_default=0, default=0, help_text='Пожалуйста, оцените работу сервиса')),
                ('text', models.TextField(blank=True, db_default='', default='', help_text='Поделитесь впечатлениями о работе сервиса', max_length=500)),
                ('reply', models.TextField(blank=True, db_default='', default='', max_length=500)),
                ('source_link', models.CharField(blank=True, db_default='', default='', max_length=100)),
                ('feedback_type', models.SmallIntegerField(choices=[(0, 'Удобство заказа'), (1, 'Функционал сайта'), (2, 'Качество выполнения заказа'), (3, 'Обратная связь и доставка')], db_default=0, default=0)),
                ('feedback_source', models.SmallIntegerField(choices=[(0, 'Сайт'), (1, 'Сторонний ресурс'), (2, 'Telegram'), (3, 'Whatsapp'), (4, 'E-mail')], db_default=0, default=0)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('rate__gte', 0), models.Q(('text', ''), _negated=True), _connector='OR'), name='empty_feedback')],
            },
        ),
    ]
